generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id          Int           @id(map: "categories_pk") @default(autoincrement())
  name        String
  description String
  icon        String
  communities communities[]
}

model comments {
  id        Int      @id(map: "comments_pk") @default(autoincrement())
  ownerId   Int
  postId    Int
  comment   String
  createdAt DateTime @default(dbgenerated("'22:15:55.247532-03'::time with time zone")) @db.Timetz(6)
  users     users    @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comments_fk0")
  posts     posts    @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comments_fk1")
}

model communities {
  id               Int                @id(map: "communities_pk") @default(autoincrement())
  name             String
  description      String?
  icon             String?
  cover            String?
  categoryId       Int
  adminId          Int
  createdAt        DateTime           @default(dbgenerated("'2023-04-07 22:15:55.247532-03'::timestamp with time zone")) @db.Timestamptz(6)
  categories       categories         @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "communities_fk0")
  users            users              @relation(fields: [adminId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "communities_fk1")
  communitiesPosts communitiesPosts[]
  usersCommunities usersCommunities[]
}

model communitiesPosts {
  id          Int         @id(map: "communitiesPosts_pk") @default(autoincrement())
  communityId Int
  postId      Int
  communities communities @relation(fields: [communityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "communitiesPosts_fk0")
  posts       posts       @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "communitiesPosts_fk1")
}

model followers {
  id                                Int   @id(map: "followers_pk") @default(autoincrement())
  followerId                        Int
  followedId                        Int
  users_followers_followerIdTousers users @relation("followers_followerIdTousers", fields: [followerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "followers_fk0")
  users_followers_followedIdTousers users @relation("followers_followedIdTousers", fields: [followedId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "followers_fk1")
}

model likes {
  id      Int   @id(map: "likes_pk") @default(autoincrement())
  postId  Int
  ownerId Int
  posts   posts @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "likes_fk0")
  users   users @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "likes_fk1")
}

model posts {
  id               Int                @id(map: "posts_pk") @default(autoincrement())
  ownerId          Int
  description      String
  media            String?            @default("null")
  createdAt        DateTime           @default(dbgenerated("'2023-04-07 22:15:55.247532-03'::timestamp with time zone")) @db.Timestamptz(6)
  comments         comments[]
  communitiesPosts communitiesPosts[]
  likes            likes[]
  users            users              @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_fk0")
}

model users {
  id                                    Int                @id(map: "users_pk") @default(autoincrement())
  fullName                              String             @db.VarChar(25)
  userName                              String             @unique @db.VarChar(25)
  picture                               String?
  email                                 String             @unique
  password                              String             @unique
  comments                              comments[]
  communities                           communities[]
  followers_followers_followerIdTousers followers[]        @relation("followers_followerIdTousers")
  followers_followers_followedIdTousers followers[]        @relation("followers_followedIdTousers")
  likes                                 likes[]
  posts                                 posts[]
  usersCommunities                      usersCommunities[]
}

model usersCommunities {
  id          Int         @id(map: "usersCommunities_pk") @default(autoincrement())
  communityId Int
  userId      Int
  communities communities @relation(fields: [communityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "usersCommunities_fk0")
  users       users       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "usersCommunities_fk1")
}
